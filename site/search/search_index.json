{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>Documentation: Parsing and Visualizing Switch Data\n\nOverview\n</code></pre> <p>This document describes the process used to parse, transform, and visualize switch data from a file. The goal was to extract switch and node information, structure it hierarchically, and represent it in a tree format using D3.js. </p> <p>\u2022   Steps and File Descriptions</p> <ol> <li>Parsing the Switch Data Purpose: Convert raw switch data from a information file into a structured JSON format.</li> </ol> <p>File: <code>parse_switch_data.js</code></p> <p>Description: This script reads the binary file containing switch data, parses it, and writes the output to a JSON file. The parsing involves extracting switch names, GUIDs, descriptions, and nodes. It also identifies whether a switch has links to other switches.</p> <p>-Input: A binary file (<code>iblatest.unknown</code>). - Output: A JSON file (<code>parsed_data_new_yukti.json</code>) containing an array of switch objects with detailed information.</p> <p>Key Functions: 1. <code>parseSwitchData(filePath)</code>: Parses the input file to extract switch details and node ranges. 2. <code>expandNodeRanges(nodes)</code>: Expands node ranges into individual nodes. 3. <code>processRange(range, expandedNodes)</code>: Processes node ranges to generate a list of nodes.</p> <p>Output JSON Structure:</p> <pre><code>[\n    {\n        \"switch_name\": \"ibsw1\",\n        \"guid\": \"0x0800380300b90060\",\n        \"description\": \"pm2-wpe1\",\n        \"nodes\": [\n            \"Mellanox\",\n            \"cn108\",\n            \"cn109\",\n            // more nodes\n        ],\n        \"hasLink\": true\n    },\n    // more switches\n]\n</code></pre> <ol> <li>Transforming the Data Purpose: Structure the parsed data into a format suitable for visualization. It categorizes switches into L1 and L2 and prepares a hierarchical format.</li> </ol> <p>File: <code>transform_data.js</code></p> <p>Description: This script processes the parsed JSON data to categorize switches and organize them into a tree structure. L1 switches have links and contain nodes, while L2 switches do not.</p> <ul> <li>Input: The JSON file from the previous step (<code>parsed_data_new_yukti.json</code>).</li> <li>Output: A JSON file (<code>result_new_yukti.json</code>) containing the structured data for visualization.</li> </ul> <p>Key Functions: 1. Categorization: Distinguishes between L1 and L2 switches based on their link status. 2. Hierarchical Structure: Links L0 switches (nodes) to L1 switches based on their presence in the node list.</p> <p>Output JSON Structure:</p> <pre><code>{\n    \"l2Switches\": [\n        // L2 switches\n    ],\n    \"l1Switches\": [\n        {\n            \"switch_name\": \"ibsw1\",\n            \"nodes\": [\n                \"Mellanox\",\n                \"cn108\",\n                // more nodes\n            ]\n        },\n        // more L1 switches\n    ]\n}\n</code></pre> <pre><code>3. Visualizing the Data\n</code></pre> <p>Purpose: Render the structured data into a visual tree representation using D3.js.</p> <p>File: <code>index.html</code></p> <p>Description: The HTML file sets up the basic structure for displaying the visualization. It includes references to the D3.js library and the JavaScript file that creates the visualization.</p> <p>Key Elements: - <code>&lt;div id=\"tree-container\"&gt;&lt;/div&gt;</code>: Container for the tree visualization. - Script Tags: Include D3.js and the custom script for visualization.</p> <p>File: <code>script.js</code></p> <p>Description: This script uses D3.js to create and render the tree structure based on the JSON data. It creates SVG elements for nodes, links, and labels.</p> <p>Key Functions: 1. Data Loading: Loads the JSON data using <code>d3.json()</code>. 2. Tree Layout: Uses <code>d3.tree()</code> to compute the tree layout. 3. SVG Elements: Appends SVG elements to represent nodes, links, and labels.</p> <p>Output: - Visualization: A tree diagram where nodes represent switches and links represent connections.</p> <p>File: <code>styles.css</code></p> <p>Description: The CSS file styles the tree visualization, including node colors, link styles, and label positions.</p> <p>Key CSS Classes: - <code>.link</code>: Styles for the lines connecting nodes. - <code>.node</code>: Styles for the nodes in the tree. - <code>.label</code>: Styles for the text labels on the nodes.</p> <p>Example CSS:</p> <pre><code>#tree-container {\n  margin: 20px;\n}\n\n.link {\n  stroke: #ccc;\n  stroke-width: 2px;\n}\n\n.node {\n  fill: #000;\n}\n\n.label {\n  font-size: 12px;\n  fill: #333;\n}\n</code></pre> <p>Conclusion</p> <p>By following these steps, you can effectively parse, transform, and visualize switch data. The provided scripts and files handle the entire process from raw data extraction to a visual tree representation, making it easy to understand and analyze the switch network.</p>"}]}